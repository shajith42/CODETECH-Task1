Database Schema
1. Table: rooms
Stores information about each room in the hotel.

CREATE TABLE rooms (
    room_id INT PRIMARY KEY AUTO_INCREMENT,
    room_number VARCHAR(10) UNIQUE NOT NULL,
    room_type VARCHAR(50) NOT NULL, -- e.g., 'Single', 'Double', 'Suite'
    price_per_night DECIMAL(10, 2) NOT NULL,
    max_occupancy INT NOT NULL,
    is_available BOOLEAN DEFAULT TRUE
);

2. Table: customers
Stores details about customers who make bookings.

CREATE TABLE customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(15),
    address VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

3. Table: reservations
Tracks individual reservations made by customers, associated with specific rooms.

CREATE TABLE reservations (
    reservation_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    room_id INT NOT NULL,
    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    reservation_status ENUM('Pending', 'Confirmed', 'Canceled') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id) ON DELETE SET NULL
);

4. Table: payments
Tracks payment information for each reservation.

CREATE TABLE payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    reservation_id INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method ENUM('Credit Card', 'Debit Card', 'Cash', 'Online') NOT NULL,
    payment_status ENUM('Pending', 'Completed', 'Failed') DEFAULT 'Pending',
    FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id) ON DELETE CASCADE
);
Insert Data for rooms Table#

INSERT INTO rooms (room_id, room_number, room_type, price_per_night, max_occupancy, is_available) VALUES
(1, '101', 'Single', 80.00, 1, TRUE),
(2, '102', 'Double', 120.00, 2, TRUE),
(3, '201', 'Suite', 200.00, 4, FALSE),
(4, '202', 'Single', 80.00, 1, TRUE);

Insert Data for customers Table#

INSERT INTO customers (customer_id, first_name, last_name, email, phone_number, address, created_at) VALUES
(1, 'John', 'Doe', 'john.doe@email.com', '1234567890', '123 Maple St', '2024-11-01 10:05:00'),
(2, 'Jane', 'Smith', 'jane.smith@email.com', '0987654321', '456 Oak St', '2024-11-02 14:15:30'),
(3, 'Alice', 'Johnson', 'alice.j@email.com', '1122334455', '789 Pine St', '2024-11-03 09:22:45');

Insert Data for reservations Table#

INSERT INTO reservations (reservation_id, customer_id, room_id, check_in_date, check_out_date, total_price, reservation_status, created_at) VALUES
(1, 1, 2, '2024-12-05', '2024-12-10', 600.00, 'Confirmed', '2024-11-05 08:45:00'),
(2, 2, 1, '2024-12-06', '2024-12-09', 240.00, 'Pending', '2024-11-06 15:10:20'),
(3, 3, 3, '2024-12-01', '2024-12-03', 400.00, 'Canceled', '2024-11-07 11:55:30');

Insert Data for payments Table#

INSERT INTO payments (payment_id, reservation_id, amount, payment_date, payment_method, payment_status) VALUES
(1, 1, 600.00, '2024-11-15 12:30:00', 'Credit Card', 'Completed'),
(2, 2, 240.00, '2024-11-16 13:40:00', 'Debit Card', 'Pending'),
(3, 3, 400.00, '2024-11-17 14:50:00', 'Cash', 'Failed');

Complex Queries


Query to find all available rooms for a specific date range:

SELECT r.room_id, r.room_number, r.room_type, r.price_per_night
FROM rooms r
LEFT JOIN reservations res
ON r.room_id = res.room_id
   AND (res.check_in_date <= '2024-12-10' AND res.check_out_date >= '2024-12-05')
WHERE res.reservation_id IS NULL OR res.reservation_status = 'Canceled';

Query to get the reservation details of a specific customer:

SELECT res.reservation_id, res.check_in_date, res.check_out_date, res.total_price, res.reservation_status
FROM reservations res
JOIN customers c ON res.customer_id = c.customer_id
WHERE c.customer_id = 1;
Query to calculate total revenue from all bookings in a specific month:


SELECT SUM(total_price) AS total_revenue
FROM reservations
WHERE reservation_status = 'Confirmed'
   AND MONTH(check_in_date) = 12 AND YEAR(check_in_date) = 2024;

Query to find customers who have unpaid reservations:


SELECT c.customer_id, c.first_name, c.last_name, res.reservation_id
FROM customers c
JOIN reservations res ON c.customer_id = res.customer_id
LEFT JOIN payments p ON res.reservation_id = p.reservation_id
WHERE p.payment_status = 'Pending' OR p.payment_status IS NULL;

